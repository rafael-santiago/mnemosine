#
#                          Copyright (C) 2019 by Rafael Santiago
#
# Use of this source code is governed by GPL-v2 license that can
# be found in the COPYING file.
#

include ~/toolsets/gcc/gcc-app.hsl
include ~/toolsets/clang/clang-app.hsl

local var src type list;
local var inc type list;
local var cflags type list;
local var lib type list;
local var ldflags type list;
local var appname type string;
local var toolset_name type string;

project mnemosine-tests : toolset $toolset_name : $src, $inc, $cflags, $lib, $ldflags, $appname;

mnemosine-tests.preloading() {
    $toolset_name = "gcc-c-app";
    var option type list;
    $option = hefesto.sys.get_option("toolset");
    if ($option.count() > 0) {
        var prefix type string;
        $prefix = $option.item(0);
        $toolset_name.replace("^gcc", $prefix);
    }
}

mnemosine-tests.prologue() {
    build_libcutest();
    $src.ls(".*\\.c$");
    $inc = hefesto.sys.get_option("includes");
    $cflags = hefesto.sys.get_option("cflags");
    $lib = hefesto.sys.get_option("libraries");
    $ldflags = hefesto.sys.get_option("ldflags");
    if (hefesto.sys.os_name() == "linux") {
        $ldflags.add_item("-ldl");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "freebsd") {
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "minix") {
        $ldflags.add_item("-lexecinfo");
    } else if (hefesto.sys.os_name() == "sunos") {
        $cflags.add_item("-DNO_CUTEST_BACKTRACING");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "netbsd") {
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "openbsd") {
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    }
    if (hefesto.sys.os_name() != "windows" && hefesto.sys.os_name() != "minix") {
        $ldflags.add_item("-lpthread");
    }
    $appname = "mnemosine-tests";
    if (hefesto.sys.os_name() == "windows") {
        $appname = $appname + ".exe";
    }
}

mnemosine-tests.epilogue() {
    if (hefesto.sys.last_forge_result() == 0) {
        var cmdline type string;
        $cmdline = hefesto.sys.make_path("bin", $appname);
        $cmdline = $cmdline + " --cutest-leak-check=yes";
        var exit_code type int;
        $exit_code = hefesto.sys.run($cmdline);
        if ($exit_code != 0) {
            hefesto.sys.echo("\n~~~ BUILD ERROR.\n");
            hefesto.project.abort($exit_code);
        }
        hefesto.sys.echo("\n*** BUILD SUCCESS.\n");
    } else {
        hefesto.sys.echo("\n~~~ BUILD ERROR.\n");
    }
}

local function build_libcutest() : result type none {
    var old_cwd type string;
    $old_cwd = hefesto.sys.pwd();
    if (hefesto.sys.cd("cutest/src")) {
        var cmdline type string;
        $cmdline = "hefesto --toolset=" + $toolset_name;
        if (hefesto.sys.run($cmdline) != 0) {
            hefesto.project.abort(1);
        }
        hefesto.sys.cd($old_cwd);
    } else {
        hefesto.sys.echo("\n~~~ BUILD EXCEPTION: Unable to find libcutest.\n");
        hefesto.project.abort(1);
    }
}
